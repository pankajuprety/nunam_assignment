# -*- coding: utf-8 -*-
"""assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/137rtc42S3ybSKFZhZzHqbiyJ9mjneQ6z

**Task 1 and 2 is done**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df=pd.read_excel("/content/drive/MyDrive/Colab Notebooks/assignment/data_1.xlsx",engine='openpyxl')

df=pd.DataFrame(df)

df

df.shape

name=df['Step Name']

name=set(name)
name

cccvchg=df[df['Step Name']=="CCCV_Chg"]

from google.colab import files
cccvchg.to_csv("cccvchg.csv")
#files.download("cccvchg.csv")

cccvchg

cccvdchg=df[df['Step Name']=="CCCV_DChg"]

from google.colab import files
cccvdchg.to_csv("cccvdchg.csv")
#files.download("cccvdchg.csv")

cccvdchg

rest=df[df['Step Name']=="Rest"]

from google.colab import files
rest.to_csv("rest.csv")
#files.download("rest.csv")

rest

"""**DownSampling of cccvchg**"""

default_time=pd.to_datetime("00:01:00.000", format='%H:%M:%S.%f')
one1=cccvchg[pd.to_datetime(cccvchg['Relative Time(h:min:s.ms)'], format='%H:%M:%S.%f')<=default_time]
two1=cccvchg[pd.to_datetime(cccvchg['Relative Time(h:min:s.ms)'], format='%H:%M:%S.%f')>default_time]
one1.shape,two1.shape

one1

first_values=one1.drop(['Record ID','Realtime','Step Name','Relative Time(h:min:s.ms)','Gap of Temperature'],axis = 1)
first_values['result']=0
first_values

two1

second_values=two1.drop(['Record ID','Realtime','Step Name','Relative Time(h:min:s.ms)','Gap of Temperature'],axis = 1)
second_values['result']=1
second_values

req_values=pd.concat([first_values,second_values])
req_values

y=req_values['result']
x=req_values.drop(['result'],axis=1)
x

from imblearn.under_sampling import NearMiss

nm = NearMiss(random_state=42)
X_res,y_res=nm.fit_sample(x,y)

X_res.shape,y_res.shape

y_res1=y_res.reshape(-1)
X_res1=X_res.reshape(-1)

from collections import Counter
print('Original dataset shape {}'.format(Counter(y)))
print('Resampled dataset shape {}'.format(Counter(y_res)))

x_res2=pd.Series(X_res1)
y_res2=pd.Series(y_res1)

obt_values={'Auxiliary channel TU1 T(°C)':x_res2,'result':y_res2}
obt_values=pd.DataFrame(obt_values)
obt_values

obt_values.to_csv("cccvchgdownsampled.csv")
#files.download("cccvchgdownsampled.csv")

"""**DownSampling of cccvdchg**"""

default_time=pd.to_datetime("00:01:00.000", format='%H:%M:%S.%f')
one1=cccvdchg[pd.to_datetime(cccvdchg['Relative Time(h:min:s.ms)'], format='%H:%M:%S.%f')<=default_time]
two1=cccvdchg[pd.to_datetime(cccvdchg['Relative Time(h:min:s.ms)'], format='%H:%M:%S.%f')>default_time]
one1.shape,two1.shape

one1

first_values=one1.drop(['Record ID','Realtime','Step Name','Relative Time(h:min:s.ms)','Gap of Temperature'],axis = 1)
first_values['result']=0
first_values

two1

second_values=two1.drop(['Record ID','Realtime','Step Name','Relative Time(h:min:s.ms)','Gap of Temperature'],axis = 1)
second_values['result']=1
second_values

req_values=pd.concat([first_values,second_values])
req_values

y=req_values['result']
x=req_values.drop(['result'],axis=1)
x

nm = NearMiss(random_state=42)
X_res,y_res=nm.fit_sample(x,y)

X_res.shape,y_res.shape

y_res1=y_res.reshape(-1)
X_res1=X_res.reshape(-1)

print('Original dataset shape {}'.format(Counter(y)))
print('Resampled dataset shape {}'.format(Counter(y_res)))

x_res2=pd.Series(X_res1)
y_res2=pd.Series(y_res1)

obt_values={'Auxiliary channel TU1 T(°C)':x_res2,'result':y_res2}
obt_values=pd.DataFrame(obt_values)
obt_values

obt_values.to_csv("cccvdchgdownsampled.csv")
#files.download("cccvdchgdownsampled.csv")

"""**DownSampling of rest**"""

default_time=pd.to_datetime("00:01:00.000", format='%H:%M:%S.%f')
one1=rest[pd.to_datetime(rest['Relative Time(h:min:s.ms)'], format='%H:%M:%S.%f')<=default_time]
two1=rest[pd.to_datetime(rest['Relative Time(h:min:s.ms)'], format='%H:%M:%S.%f')>default_time]
one1.shape,two1.shape

one1

first_values=one1.drop(['Record ID','Realtime','Step Name','Relative Time(h:min:s.ms)','Gap of Temperature'],axis = 1)
first_values['result']=0
first_values

two1

second_values=two1.drop(['Record ID','Realtime','Step Name','Relative Time(h:min:s.ms)','Gap of Temperature'],axis = 1)
second_values['result']=1
second_values

req_values=pd.concat([first_values,second_values])
req_values

y=req_values['result']
x=req_values.drop(['result'],axis=1)
x

nm = NearMiss(random_state=42)
X_res,y_res=nm.fit_sample(x,y)

X_res.shape,y_res.shape

y_res1=y_res.reshape(-1)
X_res1=X_res.reshape(-1)

print('Original dataset shape {}'.format(Counter(y)))
print('Resampled dataset shape {}'.format(Counter(y_res)))

x_res2=pd.Series(X_res1)
y_res2=pd.Series(y_res1)

obt_values={'Auxiliary channel TU1 T(°C)':x_res2,'result':y_res2}
obt_values=pd.DataFrame(obt_values)
obt_values

obt_values.to_csv("restdownsampled.csv")
#files.download("restdownsampled.csv")

